{"name": "Update pet with invalid ID", "status": "failed", "statusDetails": {"message": "AssertionError: Expected: 400 status, actual: 200\nassert 200 == 400\n +  where 200 = <Response [200]>.status_code", "trace": "add_pet = {'category': {'id': 1, 'name': 'category_name'}, 'id': 802, 'name': 'pet_name', 'photoUrls': ['url_1', 'url_n'], ...}\nclean_up_pet = None\n\n    @allure.title(\"Update pet with invalid ID\")\n    @allure.description(\"Test updating a pet with an invalid ID and validate the response against the error schema.\")\n    @allure.tag(\"API\", \"Pets\", \"Negative\")\n    @allure.severity(allure.severity_level.NORMAL)\n    @allure.label(\"assignee\", \"Mykhailo\")\n    @allure.testcase(\"API-104\")\n    @allure.parent_suite(\"API Tests\")\n    @allure.suite(\"Pets API\")\n    @allure.sub_suite(\"Update Pet\")\n    @allure.feature(\"Update Pet with Invalid ID\")\n    def test_update_pet_with_invalid_id(add_pet, clean_up_pet):\n        payload = {\n            \"id\": 1234567890,  # invalid id\n            \"category\": {\n                \"id\": 1,\n                \"name\": \"Cats\"\n            },\n            \"name\": \"Whiskers\",\n            \"photoUrls\": [\n                \"https://example.com/photos/whiskers1.jpg\",\n                \"https://example.com/photos/whiskers2.jpg\"\n            ],\n            \"tags\": [\n                {\n                    \"id\": 201,\n                    \"name\": \"Independent\"\n                },\n                {\n                    \"id\": 202,\n                    \"name\": \"Curious\"\n                }\n            ],\n            \"status\": \"pending\"\n        }\n        response = pet_api.update_pet(payload=payload, negative_flow=True)\n>       assert response.status_code == 400, f\"Expected: 400 status, actual: {response.status_code}\"\nE       AssertionError: Expected: 400 status, actual: 200\nE       assert 200 == 400\nE        +  where 200 = <Response [200]>.status_code\n\ntest_api.py:166: AssertionError"}, "description": "Test updating a pet with an invalid ID and validate the response against the error schema.", "attachments": [{"name": "stdout", "source": "d1b56015-7b24-418c-8754-3038767424cf-attachment.txt", "type": "text/plain"}], "start": 1716987091075, "stop": 1716987092526, "uuid": "eee893ce-26fd-41de-8072-3a6209123597", "historyId": "c8c676f66a7d2036094787857ba3e139", "testCaseId": "c8c676f66a7d2036094787857ba3e139", "fullName": "homework_dir.lesson24_api_regex.hm16.tests_api.test_api#test_update_pet_with_invalid_id", "labels": [{"name": "tag", "value": "Negative"}, {"name": "feature", "value": "Update Pet with Invalid ID"}, {"name": "subSuite", "value": "Update Pet"}, {"name": "parentSuite", "value": "API Tests"}, {"name": "tag", "value": "Pets"}, {"name": "suite", "value": "Pets API"}, {"name": "severity", "value": "normal"}, {"name": "assignee", "value": "Mykhailo"}, {"name": "tag", "value": "API"}, {"name": "host", "value": "maznyk"}, {"name": "thread", "value": "10232-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "homework_dir.lesson24_api_regex.hm16.tests_api.test_api"}], "links": [{"type": "tms", "url": "API-104", "name": "API-104"}]}