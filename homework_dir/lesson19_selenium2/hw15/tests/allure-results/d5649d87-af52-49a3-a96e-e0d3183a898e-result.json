{"name": "Flow testing", "status": "broken", "statusDetails": {"message": "FileNotFoundError: [WinError 2] The system cannot find the file specified", "trace": "pytestconfig = <_pytest.config.Config object at 0x000002C8D4866E10>\n\n    @allure.title(\"Create, return a WebDriver instance based on the browser type and terminate at the end of each test.\")\n    @pytest.fixture(scope='function')\n    def driver(pytestconfig):\n        \"\"\"\n        A fixture to create and return a WebDriver instance based on the browser type provided via command-line option.\n        It maximizes the window and navigates to the base URL specified in the configuration.\n        The WebDriver instance is terminated at the end of each test to ensure a clean session.\n    \n        Args:\n            pytestconfig (_pytest.config.Config): Pytest config object, automatically provided by pytest, used to access CLI options.\n    \n        Yields:\n            webdriver: An instance of WebDriver initialized based on the specified browser and base URL.\n        \"\"\"\n        browser = pytestconfig.getoption('browser')\n        driver = driver_factory(browser)\n        driver.maximize_window()\n        driver.get(config.browser.base_url)\n        shared_driver.driver = driver\n        version = driver.capabilities['browserVersion']\n        config_file = read_config('homework_dir/lesson19_selenium2/hw15/config/config.env')\n>       generate_environment_properties(config_file, version)\n\nconftest.py:35: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\utils\\environment_data_collection.py:62: in generate_environment_properties\n    \"Selenium.Version\": get_tool_version('selenium'),\n..\\utils\\environment_data_collection.py:31: in get_tool_version\n    output = subprocess.check_output([tool_name, '--version']).decode().strip()\nC:\\Users\\mmaznyk\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\subprocess.py:466: in check_output\n    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\nC:\\Users\\mmaznyk\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\subprocess.py:548: in run\n    with Popen(*popenargs, **kwargs) as process:\nC:\\Users\\mmaznyk\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\subprocess.py:1026: in __init__\n    self._execute_child(args, executable, preexec_fn, close_fds,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Popen: returncode: None args: ['selenium', '--version']>\nargs = 'selenium --version', executable = None, preexec_fn = None\nclose_fds = False, pass_fds = (), cwd = None, env = None\nstartupinfo = <subprocess.STARTUPINFO object at 0x000002C8D81217F0>\ncreationflags = 0, shell = False, p2cread = Handle(900), p2cwrite = -1\nc2pread = 11, c2pwrite = Handle(996), errread = -1, errwrite = Handle(1000)\nunused_restore_signals = True, unused_gid = None, unused_gids = None\nunused_uid = None, unused_umask = -1, unused_start_new_session = False\nunused_process_group = -1\n\n    def _execute_child(self, args, executable, preexec_fn, close_fds,\n                       pass_fds, cwd, env,\n                       startupinfo, creationflags, shell,\n                       p2cread, p2cwrite,\n                       c2pread, c2pwrite,\n                       errread, errwrite,\n                       unused_restore_signals,\n                       unused_gid, unused_gids, unused_uid,\n                       unused_umask,\n                       unused_start_new_session, unused_process_group):\n        \"\"\"Execute program (MS Windows version)\"\"\"\n    \n        assert not pass_fds, \"pass_fds not supported on Windows.\"\n    \n        if isinstance(args, str):\n            pass\n        elif isinstance(args, bytes):\n            if shell:\n                raise TypeError('bytes args is not allowed on Windows')\n            args = list2cmdline([args])\n        elif isinstance(args, os.PathLike):\n            if shell:\n                raise TypeError('path-like args is not allowed when '\n                                'shell is true')\n            args = list2cmdline([args])\n        else:\n            args = list2cmdline(args)\n    \n        if executable is not None:\n            executable = os.fsdecode(executable)\n    \n        # Process startup details\n        if startupinfo is None:\n            startupinfo = STARTUPINFO()\n        else:\n            # bpo-34044: Copy STARTUPINFO since it is modified above,\n            # so the caller can reuse it multiple times.\n            startupinfo = startupinfo.copy()\n    \n        use_std_handles = -1 not in (p2cread, c2pwrite, errwrite)\n        if use_std_handles:\n            startupinfo.dwFlags |= _winapi.STARTF_USESTDHANDLES\n            startupinfo.hStdInput = p2cread\n            startupinfo.hStdOutput = c2pwrite\n            startupinfo.hStdError = errwrite\n    \n        attribute_list = startupinfo.lpAttributeList\n        have_handle_list = bool(attribute_list and\n                                \"handle_list\" in attribute_list and\n                                attribute_list[\"handle_list\"])\n    \n        # If we were given an handle_list or need to create one\n        if have_handle_list or (use_std_handles and close_fds):\n            if attribute_list is None:\n                attribute_list = startupinfo.lpAttributeList = {}\n            handle_list = attribute_list[\"handle_list\"] = \\\n                list(attribute_list.get(\"handle_list\", []))\n    \n            if use_std_handles:\n                handle_list += [int(p2cread), int(c2pwrite), int(errwrite)]\n    \n            handle_list[:] = self._filter_handle_list(handle_list)\n    \n            if handle_list:\n                if not close_fds:\n                    warnings.warn(\"startupinfo.lpAttributeList['handle_list'] \"\n                                  \"overriding close_fds\", RuntimeWarning)\n    \n                # When using the handle_list we always request to inherit\n                # handles but the only handles that will be inherited are\n                # the ones in the handle_list\n                close_fds = False\n    \n        if shell:\n            startupinfo.dwFlags |= _winapi.STARTF_USESHOWWINDOW\n            startupinfo.wShowWindow = _winapi.SW_HIDE\n            if not executable:\n                # gh-101283: without a fully-qualified path, before Windows\n                # checks the system directories, it first looks in the\n                # application directory, and also the current directory if\n                # NeedCurrentDirectoryForExePathW(ExeName) is true, so try\n                # to avoid executing unqualified \"cmd.exe\".\n                comspec = os.environ.get('ComSpec')\n                if not comspec:\n                    system_root = os.environ.get('SystemRoot', '')\n                    comspec = os.path.join(system_root, 'System32', 'cmd.exe')\n                    if not os.path.isabs(comspec):\n                        raise FileNotFoundError('shell not found: neither %ComSpec% nor %SystemRoot% is set')\n                if os.path.isabs(comspec):\n                    executable = comspec\n            else:\n                comspec = executable\n    \n            args = '{} /c \"{}\"'.format (comspec, args)\n    \n        if cwd is not None:\n            cwd = os.fsdecode(cwd)\n    \n        sys.audit(\"subprocess.Popen\", executable, args, cwd, env)\n    \n        # Start the process\n        try:\n>           hp, ht, pid, tid = _winapi.CreateProcess(executable, args,\n                                     # no special security\n                                     None, None,\n                                     int(not close_fds),\n                                     creationflags,\n                                     env,\n                                     cwd,\n                                     startupinfo)\nE                                    FileNotFoundError: [WinError 2] The system cannot find the file specified\n\nC:\\Users\\mmaznyk\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\subprocess.py:1538: FileNotFoundError"}, "description": "Verifies the flow from Home page to Practice Form page.", "attachments": [{"name": "Details for test_flow", "source": "a3818d11-4419-43d9-a5d7-49fd77fdcf90-attachment.txt", "type": "text/plain"}], "start": 1718010942809, "stop": 1718010942809, "uuid": "9a65ce4f-8345-4c63-973c-a167401d441d", "historyId": "9279269edd41d465838009d3f5fb8898", "testCaseId": "9279269edd41d465838009d3f5fb8898", "fullName": "homework_dir.lesson19_selenium2.hw15.tests.test_practice_form#test_flow", "labels": [{"name": "feature", "value": "Practice Form page testing"}, {"name": "suite", "value": "Demo website"}, {"name": "tag", "value": "Home page"}, {"name": "severity", "value": "critical"}, {"name": "parentSuite", "value": "UI Tests"}, {"name": "tag", "value": "Forms  page"}, {"name": "subSuite", "value": "Practice Form page"}, {"name": "tag", "value": "Practice Form page"}, {"name": "host", "value": "maznyk"}, {"name": "thread", "value": "5336-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "homework_dir.lesson19_selenium2.hw15.tests.test_practice_form"}]}